[JAVA] 종합예제6 : boardService6 (접근제한자 , static/final , setter/getter )
[ 목표 ] 접근제한자 , static/final , setter/getter 문법 적용


[ 목표 ]
이전 종합예제에서 한 단계 더 나아가, Controller의 모든 멤버를 static으로 선언하여 객체 생성 없이 클래스 자체로 동작하도록 구현합니다. 이를 통해 static 키워드의 활용법과, 보다 완성된 형태의 역할 분리(MVC) 구조를 학습합니다.

[ 요구사항 ]

Board.java 클래스 설계 (Model)

private 접근 제한자를 가진 content(문자열)와 writer(문자열) 멤버 변수를 선언합니다.

두 멤버 변수를 초기화하는 생성자를 만듭니다.

각 멤버 변수에 안전하게 접근할 수 있도록 public 접근 제한자를 가진 Getter와 Setter 메소드를 각각 만듭니다.

BoardController.java 클래스 설계 (Controller)

게시물 데이터를 저장할 Board 객체 배열을 private static final 로 선언합니다. (크기: 100)

private: BoardController 클래스 외부에서 배열에 직접 접근하는 것을 막아 데이터를 보호합니다.

static: 이 배열을 모든 곳에서 공유하는 '공용 데이터 저장소'로 만듭니다. 객체를 생성하지 않아도 메모리에 존재합니다.

final: 배열 참조 변수 자체를 다른 배열로 교체할 수 없도록 합니다.

게시물 등록 기능 메소드 doPost(String content, String writer)를 public static 으로 정의합니다.

static으로 선언하여, new BoardController() 없이 BoardController.doPost() 형태로 바로 호출할 수 있도록 합니다.

매개변수로 받은 값들을 이용하여 Board 객체를 생성하고, static으로 선언된 boards 배열의 빈 공간에 저장합니다.

저장 성공 시 true, 실패 시 false를 반환합니다.

게시물 조회 기능 메소드 doGet()을 public static 으로 정의합니다.

static으로 선언된 boards 배열 전체를 반환합니다.

BoardService6.java 클래스 설계 (View / Entry Point)

main 함수를 포함하는 실행 클래스입니다.

for(;;) 무한루프 안에서 사용자에게 메뉴(1.등록 | 2.출력)를 보여주고, Scanner로 입력을 받습니다.

기능 1: 게시물 쓰기

사용자로부터 내용과 작성자를 입력받습니다.

객체를 생성하지 않고, BoardController.doPost() 형태로 클래스에 직접 접근하여 메소드를 호출하고, 반환된 결과에 따라 성공/실패 메시지를 출력합니다.

기능 2: 게시물 출력

객체를 생성하지 않고, BoardController.doGet() 형태로 클래스에 직접 접근하여 Board 배열을 반환받습니다.

반환받은 배열을 for문으로 순회하며, null이 아닌 요소의 정보를 Getter 메소드를 이용해 출력합니다.