[JAVA] 실습16 : JDBC 제품 관리
[ 문제 ] 아래 JDBC 관련 문제를 해결하시오.
[ 제출방법 ] 코드가 작성된 파일이 위치한 깃허브 상세 주소를 제출하시오.

[ 사전 준비 ]

MySQL 워크벤치에서 새로운 스키마(예: exam16)를 생성하고, use exam16;를 실행하세요.

아래 SQL을 실행하여 실습에 사용할 product 테이블을 생성하세요.

CREATE TABLE product (
    pno INT AUTO_INCREMENT,
    pname VARCHAR(50) NOT NULL,
    pprice INT NOT NULL,
    CONSTRAINT PRIMARY KEY(pno)
);

[문제 1] DTO 클래스 설계
1. product 테이블의 레코드 정보를 담을 ProductDto 클래스를 만드세요.
2. pno, pname, pprice에 해당하는 멤버 변수를 private으로 선언하세요.
3. 기본 생성자, 모든 필드를 초기화하는 생성자, 그리고 각 필드의 Getter/Setter 메소드를 만드세요.

[문제 2] DAO 클래스 설계 (싱글톤 및 DB연결)
1. DB 연결 및 CRUD 로직을 포함할 ProductDao 클래스를 싱글톤 패턴으로 설계하세요.
2. ProductDao의 생성자에서 DriverManager.getConnection()을 호출하여 jdbc_product_db 데이터베이스에 연결하는 코드를 작성하세요.
3. DB 연결에 필요한 Connection 객체는 private 멤버 변수로 선언하여 관리하세요.

[문제 3] 제품 등록 (Create)
1. ProductDao 클래스에 create(ProductDto dto) 메소드를 추가하세요.
2. 이 메소드는 ProductDto 객체를 매개변수로 받아, INSERT INTO product (pname, pprice) VALUES (?, ?) SQL을 실행합니다.
3. ? 매개변수에는 dto 객체의 getPname()과 getPprice()를 사용하여 값을 설정하세요.
4. main 함수에서 ProductDto 객체를 생성하여 dao.create()를 호출하고, 등록 결과를 확인하세요.

[문제 4] 모든 제품 조회 (Read)
1. ProductDao 클래스에 read() 메소드를 추가하세요.
2. 이 메소드는 SELECT * FROM product SQL을 실행하고, 조회된 모든 레코드를 ArrayList<ProductDto>에 담아 반환합니다.
3. main 함수에서 dao.read()를 호출하여 반환된 리스트의 모든 제품 정보를 출력하세요.

[문제 5] 제품 정보 수정 (Update)
1. ProductDao 클래스에 update(ProductDto dto) 메소드를 추가하세요.
2. 이 메소드는 ProductDto 객체를 매개변수로 받아, UPDATE product SET pname = ?, pprice = ? WHERE pno = ? SQL을 실행합니다.
3. ? 매개변수에는 dto 객체의 Getter 메소드를 사용하여 값을 설정하세요.
4. main 함수에서 pno가 1인 제품의 이름과 가격을 변경하는 ProductDto 객체를 생성하여 dao.update()를 호출하고, 수정 결과를 확인하세요.

[문제 6] 제품 삭제 (Delete)
1. ProductDao 클래스에 delete(int pno) 메소드를 추가하세요.
2. 이 메소드는 pno를 매개변수로 받아, DELETE FROM product WHERE pno = ? SQL을 실행합니다.
3. main 함수에서 dao.delete()를 호출하여 pno가 1인 제품을 삭제하고, 삭제 결과를 확인하세요.

[문제 7] Scanner를 이용한 제품 등록
1. main 함수에서 Scanner를 사용하여 사용자로부터 제품명과 가격을 입력받으세요.
2. 입력받은 정보로 ProductDto 객체를 생성하세요.
3. 생성된 Dto 객체를 ProductDao의 create() 메소드에 전달하여 제품을 등록하세요.

[문제 8] Scanner를 이용한 제품 정보 수정
1. main 함수에서 Scanner를 사용하여 사용자로부터 수정할 제품의 번호(pno)와 새로운 제품명, 새로운 가격을 입력받으세요.
2. 입력받은 정보로 ProductDto 객체를 생성하세요.
3. 생성된 Dto 객체를 ProductDao의 update() 메소드에 전달하여 제품 정보를 수정하세요.

[문제 9] Scanner를 이용한 제품 삭제
1. main 함수에서 Scanner를 사용하여 사용자로부터 삭제할 제품의 번호(pno)를 입력받으세요.
2. 입력받은 pno를 ProductDao의 delete() 메소드에 전달하여 제품을 삭제하세요.

[문제 10] CRUD 기능 통합
1. main 함수에 for(;;) 무한루프를 만드세요.
2. 루프 안에서 사용자에게 "1.제품등록 2.제품출력 3.제품수정 4.제품삭제" 메뉴를 보여주고, Scanner로 번호를 입력받으세요.
3. if-else if 문을 사용하여 각 번호에 맞는 기능(문제 7, 4, 8, 9에서 구현한 로직)이 실행되도록 프로그램을 완성하세요.