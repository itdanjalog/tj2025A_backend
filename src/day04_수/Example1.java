package day04_수;

import java.util.Scanner;

public class Example1 {
    public static void main(String[] args) {

        /*
         * =======================================================================
         * [ 파트 0. 왜 반복문(for)이 필요할까요? - "단순 반복은 컴퓨터에게!" ]
         * =======================================================================
         *
         * 사람은 같은 일을 반복하면 지치고 실수하지만, 컴퓨터는 지치지 않습니다.
         * 반복문은 '정해진 규칙에 따라 특정 코드를 반복 실행'하도록 만드는 강력한 도구입니다.
         *
         * [비유 1: 운동]
         * "팔굽혀펴기를 10번 하세요."
         * -> 1번부터 10번까지 '팔굽혀펴기'라는 행동을 반복합니다.
         *
         * [비유 2: 공장 라인]
         * "컨베이어 벨트 위 상자 100개를 모두 검사하세요."
         * -> 첫 번째 상자부터 100번째 상자까지 '검사'라는 행동을 반복합니다.
         */

        System.out.println("--- [for 반복문 문법 마스터 클래스를 시작합니다!] ---");

        // --- 1. 가장 기본적인 for문 ---
        // 문법 : for ( 1.시작값 ; 2.조건식 ; 4.증감식 ) { 3.실행코드 }
        // 비유 : "1페이지부터(시작값), 5페이지를 넘지 않을 때까지(조건식), 계속 한 페이지씩 넘기면서(증감식) 책을 읽어라(실행코드)."
        System.out.println("\n--- 1. 기본 for문 예제 (1부터 5까지 출력) ---");
        for (int i = 1; i <= 5; i++) { // i는 1에서 시작해서, 5보다 작거나 같을 때까지, 1씩 증가하며 반복
            System.out.println("현재 " + i + "페이지를 읽고 있습니다.");
        }


        // --- 2. 반복문 속의 반복문 : 중첩 for문 ---
        // 비유 : 시계. 분침(안쪽 반복문)이 60번 돌아야 시침(바깥쪽 반복문)이 1번 움직입니다.
        //       구구단. 2단(바깥쪽)이 고정된 상태에서 x1부터 x9까지(안쪽) 반복이 끝나야 3단으로 넘어갑니다.
        System.out.println("\n--- 2. 중첩 for문 예제 (구구단 2, 3단 출력) ---");
        for (int dan = 2; dan <= 3; dan++) { // 바깥쪽 for문: 2단부터 3단까지
            System.out.println("--- [" + dan + "단] ---");
            for (int gop = 1; gop <= 9; gop++) { // 안쪽 for문: 각 단마다 x1부터 x9까지
                System.out.println(dan + " * " + gop + " = " + (dan * gop));
            }
        }


        // --- 3. 이번 차례만 건너뛰기 : continue ---
        // 비유 : 식당에서 서빙하기. "3번 테이블은 잠시 자리를 비웠으니, 그냥 지나치고(continue) 4번 테이블로 가세요."
        //       전체 서빙을 멈추는 게 아니라, 특정 조건만 건너뛰고 다음 반복을 계속합니다.
        System.out.println("\n--- 3. continue 예제 (짝수는 건너뛰고 홀수만 출력) ---");
        for (int i = 1; i <= 10; i++) {
            if (i % 2 == 0) { // 만약 i가 짝수라면,
                continue;     // 아래 코드를 실행하지 말고, 즉시 다음 반복(증감식)으로 이동!
            }
            System.out.println("홀수 발견: " + i);
        }


        // --- 4. 모든 것을 멈추기 : break ---
        // 비유 : 숨바꼭질. "100까지 세기 전에 동생을 찾으면, 더 이상 셀 필요 없이(break) 바로 술래를 끝낸다."
        //       반복문 전체를 즉시 중단하고 빠져나옵니다.
        System.out.println("\n--- 4. break 예제 (5를 찾으면 반복 중단) ---");
        for (int i = 1; i <= 10; i++) {
            System.out.println("현재 " + i + "번 상자를 확인합니다.");
            if (i == 5) { // 만약 i가 5라면,
                System.out.println("찾던 물건을 5번 상자에서 발견!");
                break;    // 반복문을 즉시 탈출!
            }
        }
        System.out.println("반복문이 종료되었습니다.");


        // --- 5. 의도된 무한 반복과 탈출 : 무한루프 ---
        // 비유 : 자판기. 사용자가 동전을 넣거나 버튼을 누를 때까지(특정 조건) 계속 '대기 상태'를 무한히 반복합니다.
        //       주로 사용자 입력을 계속 받아야 하는 프로그램에서 사용됩니다.
        System.out.println("\n--- 5. 무한루프 예제 (종료 명령어 입력 대기) ---");
        Scanner scanner = new Scanner(System.in);
        // for(;;) 또는 while(true) 를 사용해 무한루프를 만듭니다.
        while (true) {
            System.out.print("메시지를 입력하세요 (종료하려면 'exit' 입력): ");
            String text = scanner.nextLine();
            System.out.println("사용자 입력: " + text);

            if (text.equals("exit")) { // 만약 입력된 내용이 "exit"와 같다면,
                System.out.println("종료 명령어를 확인했습니다.");
                break; // 무한루프를 탈출합니다.
            }
        }
        System.out.println("프로그램을 종료합니다.");

    }
}