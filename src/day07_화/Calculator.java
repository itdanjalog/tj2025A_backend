package day07_화;

// [1] 클래스 설계: 속성(멤버변수)과 기능(메소드) 정의
// 비유: 계산기 설계도. 계산기는 숫자(데이터)를 표시하고, '더하기', '빼기' 같은 '기능'을 수행합니다.

public class Calculator {
    // --- 멤버 변수 (객체의 데이터/상태) ---
    boolean isPowerOn = false; // 전원 상태

    // --- 멤버 함수 / 메소드 (객체의 기능/행동) ---

    // 1. 매개변수 X, 반환값 X 메소드
    // - 단순히 정해진 동작만 수행합니다.
    // - 비유: 계산기의 'ON' 버튼. 누르면 그냥 켜지는 기능.
    void powerOn() {
        System.out.println("계산기 전원을 켭니다.");
        isPowerOn = true; // 객체의 멤버 변수(상태)를 변경
    }

    // 2. 매개변수 X, 반환값 O 메소드 (추가된 예제)
    // - 외부에서 데이터를 받지 않고, 가지고 있던 값을 호출한 곳으로 돌려줍니다.
    // - 비유: 계산기의 'π' 버튼. 누르면 저장된 원주율 값(3.14159...)을 화면에 보여주거나(반환) 합니다.
    double getPi() {
        return 3.14159;
    }

    // 3. 매개변수 O, 반환값 X 메소드
    // - 외부에서 데이터를 받아서(매개변수) 사용하지만, 결과를 돌려주지는 않습니다.
    // - 비유: "10과 20을 화면에 출력해줘" 라고 요청. 계산기는 결과를 화면에 보여줄 뿐, 값을 우리에게 주진 않습니다.
    void printSum(int x, int y) {
        if (!isPowerOn) {
            System.out.println("전원이 꺼져있습니다. 전원을 먼저 켜주세요.");
            return; // 메소드를 즉시 종료
        }
        int sum = x + y;
        System.out.println(x + " + " + y + " = " + sum);
    }

    // 4. 매개변수 O, 반환값 O 메소드
    // - 외부에서 데이터를 받아서(매개변수) 가공한 뒤, 그 결과를 호출한 곳으로 돌려줍니다(반환).
    // - 비유: "10과 20을 더한 값을 나에게 알려줘" 라고 요청. 계산기는 '30'이라는 결과값을 우리에게 돌려줍니다.
    int add(int x, int y) {
        if (!isPowerOn) {
            System.out.println("전원이 꺼져있습니다. 전원을 먼저 켜주세요.");
            return 0; // int 타입의 기본값인 0을 반환하고 종료
        }
        int result = x + y;
        return result; // 'return' 키워드로 결과값을 반환
    }

    // 5. 메소드 오버로딩 (Overloading)
    // - 같은 이름의 메소드를 매개변수의 타입이나 개수를 다르게 하여 여러 개 정의하는 것.
    // - 비유: '더하기' 기능은 정수 2개를 더할 수도, 실수 2개를 더할 수도 있습니다.
    double add(double x, double y) {
        return x + y;
    }
}
