package day07_화;

/**
 * 자바 생성자(Constructor) 문법 마스터 클래스
 * 이 수업 자료는 객체가 '생성'될 때 호출되는 생성자의
 * 개념, 역할, 그리고 다양한 활용법을 실생활 비유와 간단한 예제로 설명하여
 * 객체 지향 프로그래밍의 핵심을 이해할 수 있도록 설계되었습니다.
 */

// [1] 클래스 설계: 속성과 기능, 그리고 '생성자'
// 비유: 스마트폰 설계도. 스마트폰은 모델명(속성)을 가지며, 전화걸기(기능)를 할 수 있습니다.
//      '생성자'는 공장에서 스마트폰을 '처음 만들 때' 모델명을 각인시키는 작업과 같습니다.
class Phone {
    // --- 멤버 변수 (속성) ---
    String model;
    String color;
    int price;

    // --- 생성자 (Constructor) ---
    // [조건] 1. 이름이 클래스명과 동일하다.  2. 반환타입이 없다.
    // [역할] 객체가 생성될 때(new) 자동으로 한 번 호출되어, 멤버 변수를 초기화하는 역할을 주로 합니다.

    // 1. 기본 생성자 (Default Constructor)
    // - 클래스 내에 생성자가 하나도 없으면, 컴파일러가 자동으로 아래와 같은 기본 생성자를 추가해줍니다.
    // - 개발자가 생성자를 하나라도 만들면, 기본 생성자는 자동으로 추가되지 않습니다.
    Phone() {
        System.out.println("[알림] Phone의 기본 생성자가 호출되었습니다.");
        model = "알뜰폰";
        color = "블랙";
        price = 100000;
    }

    // 2. 매개변수가 있는 생성자
    // - new 키워드로 객체를 생성할 때, 외부에서 값을 받아와 멤버 변수를 초기화합니다.
    // - 비유: "아이폰, 화이트 색상으로 만들어주세요" 라고 주문하는 것과 같습니다.
    Phone(String pModel, String pColor) {
        System.out.println("[알림] 매개변수 2개(모델, 색상) 생성자가 호출되었습니다.");
        // 'this' 키워드: 매개변수명과 멤버변수명이 같을 때, 'this.멤버변수'는 클래스의 멤버임을 명확히 알려줍니다.
        this.model = pModel;
        this.color = pColor;
        this.price = 1200000; // 가격은 고정값으로 초기화
    }

    // 3. 생성자 오버로딩 (Overloading)
    // - 메소드 오버로딩처럼, 매개변수의 개수나 타입을 다르게 하여 생성자를 여러 개 정의할 수 있습니다.
    Phone(String pModel, String pColor, int pPrice) {
        System.out.println("[알림] 매개변수 3개(모델, 색상, 가격) 생성자가 호출되었습니다.");
        this.model = pModel;
        this.color = pColor;
        this.price = pPrice;
    }

    // --- 메소드 (기능) ---
    void printInfo() {
        System.out.println("모델명: " + model + ", 색상: " + color + ", 가격: " + price + "원");
    }
}


public class Example2_생성자 {

    public static void main(String[] args) {

        /*
         * =======================================================================
         * [ 파트 0. 왜 생성자(Constructor)가 필요할까요? - "객체의 탄생과 초기화" ]
         * =======================================================================
         *
         * 이전에는 객체를 만들고(new) 나서, 멤버 변수에 값을 하나하나 넣어주었습니다.
         * Car car1 = new Car();
         * car1.name = "소나타";
         * car1.color = "흰색";
         *
         * 하지만 '생성자'를 사용하면, 객체를 만들 때부터 필요한 값을 바로 전달하여
         * 완벽한 상태의 객체를 탄생시킬 수 있습니다.
         *
         * [비유 1: 붕어빵 주문]
         * - 생성자 없는 경우: "빈 붕어빵 하나 주세요." -> (받은 뒤) -> "여기에 팥 좀 넣어주세요."
         * - 생성자 있는 경우: "처음부터 팥으로 만든 붕어빵 하나 주세요!"
         *
         * 생성자는 객체가 생성되는 시점에 필수적인 작업을 처리하여, 객체의 안정성을 높여줍니다.
         */

        System.out.println("--- [생성자 문법 마스터 클래스를 시작합니다!] ---");

        // --- 1. 기본 생성자를 이용한 객체 생성 ---
        System.out.println("\n--- 1. 기본 생성자 호출 ---");
        Phone phone1 = new Phone(); // new Phone() 하는 순간, Phone() 기본 생성자가 자동으로 호출됩니다.
        phone1.printInfo(); // 생성자에서 초기화된 기본값들이 출력됩니다.


        // --- 2. 매개변수가 있는 생성자를 이용한 객체 생성 ---
        System.out.println("\n--- 2. 매개변수가 있는 생성자 호출 ---");
        // new Phone(...) 하는 순간, 매개변수 타입과 개수가 일치하는 생성자가 자동으로 호출됩니다.
        Phone phone2 = new Phone("갤럭시 S24", "실버");
        phone2.printInfo(); // 생성자에서 전달받은 값으로 초기화된 정보가 출력됩니다.


        // --- 3. 생성자 오버로딩 활용 ---
        System.out.println("\n--- 3. 오버로딩된 다른 생성자 호출 ---");
        Phone phone3 = new Phone("아이폰 15 Pro", "화이트", 1550000);
        phone3.printInfo();


        // ★★★ 결론: 생성자는 new 키워드와 함께 동작하는 '객체 초기화 전용 메소드'이며,
        // 객체가 생성될 때 완전한 상태를 갖도록 보장하는 중요한 역할을 합니다. ★★★
    }
}
