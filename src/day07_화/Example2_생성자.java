package day07_화;

/*

	// + 생성자 : 객체를 처음 만들때 멤버변수나 상수를 초기화 하는것
		// 종류 :
		//		1. 디폴트생성자 생성자가 없는 클래스는 컴파일에서 자동으로 생성자를 만들어준다.
		//		2. 임의의 매개변수를 사용하는 생성자
		// 목적 : 주로 멤버변수에 대한 값들을 매개변수로 받아서 인스턴스가 생성될 때 멤버변수 값들을 *초기화* 역할
		// 선언규칙 : *생성자명 과 클래스명* 과 동일하게 한다. 함수와 동일하게 매개변수는 존재할수 있지만 반환값은 없다.
		// 오버로드 : 동일한 생성자명을 여러개 선언 , *전제조건* 매개변수의 개수,타입,순서 에 다를경우에만 가능. ( 매개변수명 제외 )

    // 2. 생성자 : 객체(new) 생성시 초기화(선택사항) 담당하는 역할
		// 규칙 : 생성자명은 클래스명과 동일하다. 리턴값은 없고 매개변수는 있다. 생성자 사용할때 매개변수 타입,개수 일치
		// 목적 : 주로 객체생성할때 매개변수를 받아서 멤버변수에 대입 , 유효성검사
		// 관례 : 매개변수명과 멤버변수명이 동일 하되 . 멤버변수명 앞에 this 붙인다.
		// 오버로드 : 원래는 동일한이름으로 여러개 선언이 불가능하지만.
			// 매개변수 *개수,타입,순서* 가 다르면 오버로딩 지원한다. (함수/생성자)
		// 주의할점 : 멤버변수가 많으면 과도한 생성자의 개수가 경우에 따라 늘어갈수 있다. ( 관리 , 유지보수 )
		// 사용할지점 : 객체를 만들때 객체내 멤버변수에 처음값을 대입하고자 할때 생성자 만들어주기.
			// --> 객체를 많을때 상황에 따라 처음값(초기화)이 다르면 다양하게 생성자를 상황에 맞추어 만든다.
			// 예] 게시물등록시 필요한 생성자 , 게시물수정시 필요한 생성자 , 게시물삭제시 필요한 생성자
			// --> 문법X --> 내가 객체 만들때 객체내 멤버변수 값들을 *초기에 빠른 대입할것이 있는지 판단*

 */

public class Example2_생성자 {

    public static void main(String[] args) {

        /*
         * =======================================================================
         * [ 파트 0. 왜 생성자(Constructor)가 필요할까요? - "객체의 탄생과 초기화" ]
         * =======================================================================
         *
         * 이전에는 객체를 만들고(new) 나서, 멤버 변수에 값을 하나하나 넣어주었습니다.
         * Car car1 = new Car();
         * car1.name = "소나타";
         * car1.color = "흰색";
         *
         * 하지만 '생성자'를 사용하면, 객체를 만들 때부터 필요한 값을 바로 전달하여
         * 완벽한 상태의 객체를 탄생시킬 수 있습니다.
         *
         * [비유 1: 붕어빵 주문]
         * - 생성자 없는 경우: "빈 붕어빵 하나 주세요." -> (받은 뒤) -> "여기에 팥 좀 넣어주세요."
         * - 생성자 있는 경우: "처음부터 팥으로 만든 붕어빵 하나 주세요!"
         *
         * 생성자는 객체가 생성되는 시점에 필수적인 작업을 처리하여, 객체의 안정성을 높여줍니다.
         */

        System.out.println("--- [생성자 문법 마스터 클래스를 시작합니다!] ---");

        // --- 1. 기본 생성자를 이용한 객체 생성 ---
        System.out.println("\n--- 1. 기본 생성자 호출 ---");
        Phone phone1 = new Phone(); // new Phone() 하는 순간, Phone() 기본 생성자가 자동으로 호출됩니다.
        phone1.printInfo(); // 생성자에서 초기화된 기본값들이 출력됩니다.


        // --- 2. 매개변수가 있는 생성자를 이용한 객체 생성 ---
        System.out.println("\n--- 2. 매개변수가 있는 생성자 호출 ---");
        // new Phone(...) 하는 순간, 매개변수 타입과 개수가 일치하는 생성자가 자동으로 호출됩니다.
        Phone phone2 = new Phone("갤럭시 S24", "실버");
        phone2.printInfo(); // 생성자에서 전달받은 값으로 초기화된 정보가 출력됩니다.


        // --- 3. 생성자 오버로딩 활용 ---
        System.out.println("\n--- 3. 오버로딩된 다른 생성자 호출 ---");
        Phone phone3 = new Phone("아이폰 15 Pro", "화이트", 1550000);
        phone3.printInfo();


        // ★★★ 결론: 생성자는 new 키워드와 함께 동작하는 '객체 초기화 전용 메소드'이며,
        // 객체가 생성될 때 완전한 상태를 갖도록 보장하는 중요한 역할을 합니다. ★★★
    }
}
