package day05_목;

public class 실습6 {
}
/*
https://github.com/itdanja/ezen_2023B_backend/tree/master/src/%EA%B3%BC%EC%A0%9C/%EA%B3%BC%EC%A0%9C4
JAVA] 실습6 : 배열과반복문
[ 문제 ] 아래 반복문 관련 문제
[ 제출방법 ] 코드가 작성된 파일이 위치한 깃허브 상세 주소를 제출하시오.
*/

/*문제 2: 배열의 모든 요소 출력하기
다음과 같은 과일 배열이 있습니다. for 반복문을 사용하여
배열의 모든 요소를 하나씩 콘솔에 출력하시오.
let fruits = ['사과', '바나나', '포도', '딸기'];*/
// *반복변수의 패턴* : 배열의모든요소( 0 부터 마지막인덱스[ .length-1 ]까지 1씩증가 )
let fruits = ['사과', '바나나', '포도', '딸기'];
        for( let index = 0 ; index <= fruits.length - 1 ; index++ ){
        // index는 0부터 마지막인덱스 까지 1씩 증가 반복
        console.log( fruits[index] ); // index 번째의 요소값 호출
} // for end

/*문제 3: 배열 역순으로 출력하기
주어진 배열을 for 반복문을 사용하여
역순으로 (마지막 요소부터 첫 요소 순서로) 출력하는 프로그램을 작성하시오.
let numbers = [1, 2, 3, 4, 5];  출력 예시: 5 4 3 2 1  */
let numbers = [1, 2, 3, 4, 5];
        console.log( numbers[4] );
console.log( numbers[3] );
console.log( numbers[2] );
console.log( numbers[1] );
console.log( numbers[0] );
// *반복변수의 패턴* : 4 3 2 1 0 : 마지막 인덱스부터 0 까지 1씩 감소
for( let index = numbers.length-1 ; index >= 0 ; index-- ){
        // index는 마지막인덱스부터 0 까지 1씩 감소
        console.log( numbers[index] );
} // for end

/*문제 6: 배열 요소의 합계와 평균 구하기
다음 학생들의 점수가 담긴 배열이 있습니다. for 반복문을 사용하여 모든 점수의 합계와 평균을 계산하여 콘솔에 출력하시오.
let scores = [85, 92, 78, 65, 95]; */
// * 배열내 모든 점수 조회 : 0부터 마지막인덱스까지 조회
// for( let index = 0 ; index <= 마지막인덱스 ; index++ ){ }

/*
let scores = [85, 92, 78, 65, 95];
let sum = 0; // 누적 총합계를 구해야 하므로 for 밖에 선언
for( let index = 0 ; index <= scores.length - 1 ; index++ ){ // index는 0부터 마지막 인덱스 이하까지 1씩증가 반복
    // let sum = 0; 여기에 합계 변수를 선언하면 안된다 : 합계변수는 *누적* 해야하므로 선언를 반복하면 안됨.
    sum += scores[index];   // 배열내 index번재의 요소 값 를 더한다.
    // 평균계산은 반복할 필요가 없다.!
} // for end
console.log( `총점 : ${ sum }  , 평균 : ${ sum/scores.length } `  );
*/

/* 문제 7: 특정 조건에서 반복문 탈출하기 (break)
점수 배열에서 100점 만점자가 처음 나타나면, 그 학생의 점수를 출력하고 반복문을 즉시 종료하는 프로그램을 작성하시오.
let scores = [77, 82, 100, 54, 96];
출력 예시: 100점 만점자를 찾았습니다!*/

/*
let scores = [77, 82, 100, 54, 96];
for( let index = 0 ; index <= scores.length - 1 ; index++ ){
    let value = scores[index]; // index번째 요소 값 호출
    if( value == 100 ){ //만약에 해당 값이 100(만점) 이면
        console.log( `${value}점 만점자를 찾았습니다.!`);
        break; // 가장 가까운 for{} 탈출/종료
    } // if end
} // for end
// break를 만나면  [***여기***] 로 이동된다.
*/

/*문제 8: 특정 조건 건너뛰기 (continue)
점수 배열에서 60점 미만(과락)인 점수는 건너뛰고, 60점 이상인 점수만 콘솔에 출력하는 프로그램을 작성하시오.
let scores = [90, 45, 72, 88, 59, 100];*/

/*
let scores = [90, 45, 72, 88, 59, 100];
for( let index = 0 ; index <= scores.length - 1 ; index++ ){
    let value = scores[ index ]; // index번째의 요소 값 호출
    if( value < 60 ){ continue; } // 가장 가까운 반복문의 증감식으로 이동
    console.log( value );
} // for end
*/

/*문제 9: 배열에서 특정 값의 개수 세기
다음 배열에서 'A'형 혈액형을 가진 사람이 몇 명인지 for 반복문을 통해 세고, 그 수를 콘솔에 출력하시오.
let bloodTypes = ['A', 'B', 'O', 'AB', 'A', 'B', 'A']; */

/*
let bloodTypes = ['A', 'B', 'O', 'AB', 'A', 'B', 'A'];
let countA = 0; // A형 개수를 저장하는 변수
for( let index = 0 ; index <= bloodTypes.length-1 ; index++ ){
    let blood = bloodTypes[index]; // index번째의 혈액형 호출
    if( blood == 'A'){ // 만약에 혈액형이 A이면
        countA++; // vs countA += 1 vs countA = countA + 1
    }
} // for end
console.log( `A형 개수 : ${ countA }`);
*/

/*문제 10: 학생 점수 시각화하기
주어진 학생 이름과 점수 배열을 이용하여, 각 학생의 점수를 동그라미(●, ○)로 시각화하여 HTML에 출력하는 프로그램을 작성하시오.
(1). 초기 데이터
학생 이름과 점수는 두 배열의 동일한 인덱스를 사용합니다.
let nameArray = ['유재석', '강호동', '신동엽'];
let scores = [92, 86, 72];
(2). 구현 조건
for 반복문을 사용하여 모든 학생의 데이터를 순회합니다.
점수를 100점 만점으로 환산하여 시각화합니다.
점수의 십의 자리 숫자만큼 꽉 찬 동그라미(●)를, **나머지(10 - 십의 자리 수)**만큼 빈 동그라미(○)를 출력합니다.
예시: 점수가 92점이면 십의 자리는 9이므로, ●●●●●●●●●○ 와 같이 표현합니다.
HTML에 학생 이름과 변환된 점수 시각화를 한 줄씩 출력합니다.
(3). 출력 예시 (HTML)
유재석 ●●●●●●●●●○
강호동 ●●●●●●●●○○
신동엽 ●●●●●●●○○○  */


문제 1: 배열에서 최댓값 찾기
주어진 숫자 배열에서 가장 큰 값을 찾아 콘솔에 출력하는 프로그램을 작성하시오. (단, Math.max() 함수 사용 금지)
let numbers = [23, 5, 67, 12, 88, 34]; */
/*
// 메모(기억=변수) : 가장 큰 값
let max = numbers[0];   // 첫번째 점수를 가장 큰수로 기억/저장
// 만약에 max(기록) 보다 더 큰 수가 존재하면 더큰수를 max(기록) 대입한다.
if( max < numbers[1] ){ max = numbers[1] }
if( max < numbers[2] ){ max = numbers[2] }
if( max < numbers[3] ){ max = numbers[3] }
if( max < numbers[4] ){ max = numbers[4] }
if( max < numbers[5] ){ max = numbers[5] } // 반복적인 코드 확인
console.log( max ); // 결과
*/
let numbers = [23, 5, 67, 12, 88, 34];
let max = 0; // 점수를 최저점수 를 임의로 대입 시작
for( let index =  0 ; index <= numbers.length - 1 ; index++ ){
        // index는 0부터 마지막인덱스 이하까지 1씩증가.
        if( max < numbers[index] ){ max = numbers[index]; }
        // 만약에 max 보다 index번째 요소값이 더크면 max에 index번째 요소값을 대입한다.
        } // for end
        console.log( max );


/*문제 3: 배열에서 특정 문자 찾기 (break 활용)  */
// 배열내 -> 하나의 요소/값/문자열 -> 솔이 포함.  // 김하준(문자열)은 배열의 기반으로 만들어진 자료이다.
// (1) 모든 배열의 이름들을 *하나씩: 0 ~ 마지막까지 1씩* 꺼낸다. < 배열 순회 >
let userNames = [ '김하준', '이서아', '박솔민', '최도윤'];
        for( let index = 0 ; index <= userNames.length - 1 ; index++ ){
let name = userNames[index]; // index 번째의 이름 꺼낸다. // console.log( name );
// (2) 이름의 '솔' 포함된
    if( name.indexOf('솔') != -1 ){  console.log( name )  }
        } // for end
// 문자 : 문자 1개 <아스키코드/유니코드> , 문자열 : 문자 여러개 <배열>
// C언어 : let 이름 = [ '김' , '하' , '준']

/*문제 4: 2차원 배열의 모든 요소 출력하기
다음과 같은 2차원 배열(좌석표)이 있습니다. 중첩 for 반복문을 사용하여 모든 좌석의 값을 순서대로 출력하시오.
let seatLayout = [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]; */
// 배열 출력X , 배열내 모든 요소 출력
let seatLayout = [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']];
        for( let i = 0 ; i <= seatLayout.length - 1 ; i++ ){
// 행 출력
let row = seatLayout[i]; // i번째 배열(요소) 꺼낸다.
// console.log( row )
// 열 출력
    for( let j = 0 ; j <= row.length - 1 ; j++ ){
let column = row[j];
        console.log( column );
    } // for end
            } // for end


/*문제 5: 배열의 중복 요소 제거하기
주어진 배열에서 중복된 요소를 제거하고, 중복 없는 새로운 배열을 만들어 출력하시오.
let numbers = [1, 5, 2, 3, 5, 1, 4, 2];
힌트: 새로운 배열을 만들고, for 반복문으로 기존 배열을 순회하며 새로운 배열에 해당 요소가 없을( .indexOf() == -1 ) 때만 추가(push())합니다.

문제 6: 버블 정렬 (Bubble Sort) 구현하기
주어진 숫자 배열을 '버블 정렬' 알고리즘을 이용하여 오름차순으로 정렬하고, 최종 정렬된 배열을 출력하시오.
let numbers = [5, 3, 4, 1, 2];
힌트: 중첩 for 반복문을 사용하며, 이웃한 두 요소를 비교하 위치를 바꿉니다.

문제 7: 재고 관리 시스템
두 개의 배열 products(상품 목록)와 stock(재고 수량)이 있습니다.
사용자로부터 구매할 상품명과 수량을 입력받아, 재고가 충분하면 "구매 완료!"를 출력하고 재고를 차감하세요. 재고가 부족하면 "재고가 부족합니다."를 출력합니다.
let products = ['볼펜', '노트', '지우개'];
let stock = [10, 5, 20];*/

let products = [ '볼펜', '노트', '지우개'];
let stock = [10, 5, 20];
let 상품명 = prompt(' 상품명 입력: ');          // (1) 사용자로부터 구매할 상품명 입력받아,
let 수량 = Number(prompt(''));                 // (2) 사용자로부터 구매할 수량을 입력받아,
let findIndex = products.indexOf( 상품명 );     // (3) 입력받은 상품명이 상품목록 존재하는지 확인
// -1 : 없다 , 0이상 : 있다.
if( findIndex >= 0 ){ // 제품 찾았다.
        if( stock[ findIndex ] >= 수량 ){ // 찾은 제품의 재고가 입력받은 수량 보다 많으면
        console.log("구매 완료!");
stock[ findIndex ] -= 수량
    }else{ console.log("재고가 부족합니다."); }
        } // if end
        else{ // 못찾았다.
        console.log('없는 제품명 입니다. ')
}

/*문제 8: 영화 평점 시각화하기
주어진 영화 이름과 평점 배열을 이용하여, 각 영화의 평점을 별(★)로 시각화하여 HTML에 출력하는 프로그램을 작성하시오.
(1). 초기 데이터
영화 이름과 평점은 두 배열의 동일한 인덱스를 사용합니다.
let movieNames = ['히든페이스', '위키드', '글래디에이터2', '청설'];
let movieRatings = [8, 4, 7, 6];
(2). 구현 조건
for 반복문을 사용하여 모든 영화를 순회합니다.
각 영화의 평점(10점 만점)만큼 꽉 찬 별(★)을, 나머지 점수만큼 빈 별(☆)을 출력합니다.
예시: 평점이 8점이면 ★★★★★★★★☆☆ (총 10개의 별)
영화 이름과 별점은 HTML에 한 줄씩 표시합니다.
(3). HTML 출력 예시
히든페이스      ★★★★★★★★☆☆
위키드          ★★★★☆☆☆☆☆☆
글래디에이터2   ★★★★★★★☆☆☆
청설            ★★★★★★☆☆☆☆ */

/*문제 9: 좌석 예약 상태 표시하기
총 6개의 좌석 상태 정보가 담긴 배열을 이용하여, 좌석 배치도와 상태를 HTML에 출력하는 프로그램을 작성하시오.
(1). 초기 데이터
좌석의 상태는 '빈좌석' 또는 '예약석'으로 구성됩니다.
let seatStatus = ['빈좌석', '예약석', '예약석', '빈좌석', '예약석', '빈좌석'];
(2). 구현 조건
for 반복문을 사용하여 6개의 좌석을 모두 출력합니다.
각 좌석은 하나의 <div> 태그로 표시합니다.
좌석 상태에 따라 <div> 태그에 CSS 색상을 다르게 적용합니다.
'빈좌석': color: blue;
'예약석': color: red;
좌석은 2칸씩 3줄 형태로 배치합니다.
(3). 출력 예시 (HTML)
빈좌석 예약석
예약석 빈좌석
예약석 빈좌석
*/

/*문제 10: 주차 요금 정산하기
차량별 주차 시간 데이터가 주어졌을 때, 아래의 요금 규정에 따라 각 차량이 지불해야 할 최종 주차 요금을 계산하여 HTML에 출력하는 프로그램을 작성하시오.
(1). 초기 데이터
차량 번호와 주차 시간(분)은 두 배열의 동일한 인덱스를 사용합니다.
let carNumbers = ['210어7125', '142가7415', '888호8888', '931나8234'];
let usageMinutes = [65, 30, 140, 420];
(2). 요금 규정
기본 요금: 최초 30분까지 1,000원
추가 요금: 30분 초과 시, 매 10분마다 500원씩 추가
일일 최대 요금: 20,000원 (아무리 오래 주차해도 20,000원을 초과할 수 없음)
(3). 구현 조건
for 반복문을 사용하여 모든 차량의 데이터를 순회합니다.
각 차량의 주차 시간에 맞춰 최종 요금을 계산합니다.
계산된 요금이 일일 최대 요금을 초과하면, 최대 요금(20,000원)으로 처리합니다.
HTML에 차량 번호, 주차 시간, 최종 요금을 한 줄씩 출력합니다.
(4). 출력 예시 (HTML)
250어7142: 65분 주차, 최종 요금: 2500원
142가7415: 30분 주차, 최종 요금: 1000원
888호8888: 140분 주차, 최종 요금: 6500원
931나8234: 420분 주차, 최종 요금: 20000원
(힌트)
기본 시간(30분)을 초과한 시간을 계산하고, parseInt() 함수를 사용하여 10분 단위로 버림 처리하면 추가 요금 단위를 쉽게 계산할 수 있습니다.
추가 요금 단위 계산식:parseInt( (총 주차시간 - 30) / 10 )
계산 예시:65분 주차 시 parseInt( (65 - 30) / 10 )는 parseInt(3.5)가 되어 결과는 3이 됩니다. 따라서 추가 요금은 3 * 500원으로 계산됩니다.
*/